 @article{wade_kulkarni_jantz_2017,
  title   = {AOT vs. JIT: Impact of profile data on Code Quality},
  volume  = {52},
  doi     = {10.1145/3140582.3081037},
  number  = {5},
  journal = {ACM SIGPLAN Notices},
  author  = {Wade, April W. and Kulkarni, Prasad A. and Jantz, Michael R.},
  year    = {2017},
  pages   = {1–10}
} 

 @book{wagenknecht_hielscher_2022,
  place     = {Wiesbaden, Deutschland},
  title     = {Formale Sprachen, abstrakte Automaten und Compiler},
  volume    = {3},
  publisher = {Springer Vieweg},
  author    = {WAGENKNECHT, CHRISTIAN and HIELSCHER, MICHAEL},
  year      = {2022}
} 

@article{10.1145/857076.857077,
  author     = {Aycock, John},
  title      = {A Brief History of Just-in-Time},
  year       = {2003},
  issue_date = {June 2003},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {35},
  number     = {2},
  issn       = {0360-0300},
  url        = {https://doi.org/10.1145/857076.857077},
  doi        = {10.1145/857076.857077},
  abstract   = {Software systems have been using "just-in-time" compilation (JIT) techniques since the 1960s. Broadly, JIT compilation includes any translation performed dynamically, after a program has started execution. We examine the motivation behind JIT compilation and constraints imposed on JIT compilation systems, and present a classification scheme for such systems. This classification emerges as we survey forty years of JIT work, from 1960--2000.},
  journal    = {ACM Comput. Surv.},
  month      = {jun},
  pages      = {97–113},
  numpages   = {17},
  keywords   = {dynamic compilation, Just-in-time compilation}
}

@book{Hellige2013,
  author    = {Hellige, Hans Dieter},
  year      = {2013},
  title     = {Geschichten der Informatik - Visionen, Paradigmen, Leitmotive},
  edition   = {},
  isbn      = {978-3-642-18631-8},
  publisher = {Springer-Verlag},
  address   = {Berlin Heidelberg New York}
}

@book{Beyer2012,
  author    = {Beyer, Kurt W.},
  year      = {2012},
  title     = {Grace Hopper and the Invention of the Information Age - },
  edition   = {},
  isbn      = {978-0-262-51726-3},
  publisher = {MIT Press},
  address   = {Cambridge}
}

@inproceedings{Bennett1952,
  author    = {Bennett, J. M. and Prinz, D. G. and Woods, M. L.},
  title     = {Interpretative Sub-Routines},
  year      = {1952},
  isbn      = {9781450379250},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/800259.809002},
  doi       = {10.1145/800259.809002},
  abstract  = {The subject of this talk is interpretative programming. An interpretative programme (or routine, i.e. part of a programme) is one formulated in a special code, usually quite different from the normal code of the machine with which it is used.},
  booktitle = {Proceedings of the 1952 ACM National Meeting (Toronto)},
  pages     = {81–87},
  numpages  = {7},
  location  = {Toronto, Ontario, Canada},
  series    = {ACM '52}
}

@inproceedings{Stoyan1984,
author = {Stoyan, Herbert},
title = {Early LISP History (1956 - 1959)},
year = {1984},
isbn = {0897911423},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/800055.802047},
doi = {10.1145/800055.802047},
abstract = {This paper describes the development of LISP from McCarthy's first research in the topic of programming languages for AI until the stage when the LISP1 implementation had developed into a serious program (May 1959). We show the steps that led to LISP and the various proposals for LISP interpreters (between November 1958 and May 1959). The paper contains some correcting details to our book (32).},
booktitle = {Proceedings of the 1984 ACM Symposium on LISP and Functional Programming},
pages = {299–310},
numpages = {12},
location = {Austin, Texas, USA},
series = {LFP '84}
}